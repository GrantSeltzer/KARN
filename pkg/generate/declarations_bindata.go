// Code generated by go-bindata.
// sources:
// declarations/admin_declaration.toml
// declarations/chown_declaration.toml
// declarations/default_declaration.toml
// declarations/dns_declaration.toml
// declarations/fd_declaration.toml
// declarations/filesystem_declaration.toml
// declarations/naming_declaration.toml
// declarations/receive_declaration.toml
// declarations/removable_storage_declaration.toml
// declarations/safe_declaration.toml
// declarations/send_declaration.toml
// declarations/socket_declaration.toml
// DO NOT EDIT!

package generate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _declarationsAdmin_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x31\xce\x83\x30\x0c\x05\xe0\xdd\xa7\x88\x32\xff\xff\xd2\xa1\xea\xd2\xa1\xe2\x08\x1d\x11\x42\x06\x82\x1a\xe1\xc4\x69\xed\x14\x71\xfb\x0e\x28\x11\x6c\xef\xb3\xac\xf7\xda\x06\x13\x0e\x9e\xbc\x7a\x27\x1d\x3c\x88\x78\x35\x77\xd3\x5a\xd9\xa4\xc7\x29\xf8\x68\x3b\x80\xf6\xb9\x89\xba\xf0\xdf\x20\xd1\xf1\x0b\x8c\x31\xc6\x0e\x69\xb6\x7f\x7b\x1c\x89\xa3\x2b\x20\xe6\x25\xa7\x7e\x1a\x99\x17\x5f\xaf\x81\x73\xd4\x82\x77\x66\xc5\x51\xa9\x58\x9c\x46\xa9\x58\x31\x71\x3c\x69\xae\x4b\xf9\xd4\xb3\xeb\x52\x19\xe5\x85\x9f\x3a\xf9\x0d\xb7\xeb\x31\x33\x4d\x16\x3a\x80\x5f\x00\x00\x00\xff\xff\x23\xc6\xb3\x6c\xfd\x00\x00\x00")

func declarationsAdmin_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsAdmin_declarationToml,
		"declarations/admin_declaration.toml",
	)
}

func declarationsAdmin_declarationToml() (*asset, error) {
	bytes, err := declarationsAdmin_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/admin_declaration.toml", size: 253, mode: os.FileMode(420), modTime: time.Unix(1503423003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsChown_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xae\x2c\x2e\x49\xcd\xd5\x75\x4e\xcc\xc9\x29\x8e\xe5\x72\xcc\xc9\xc9\x2f\x57\xb0\x55\x88\xe6\x52\x80\x00\xa5\xe4\x8c\xfc\xf2\x3c\x25\x1d\x54\xbe\xb1\x11\x92\x48\x1a\xba\x92\x34\x5c\x6a\x12\x4b\x90\x84\x72\xd0\xb5\xe5\xc0\xb4\x71\xc5\x72\x71\x45\x3b\x27\x16\x24\x26\x65\xe6\x64\x96\x64\xa6\x22\xbb\x0b\xea\x9e\x58\x40\x00\x00\x00\xff\xff\x72\x62\x23\xbb\xb8\x00\x00\x00")

func declarationsChown_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsChown_declarationToml,
		"declarations/chown_declaration.toml",
	)
}

func declarationsChown_declarationToml() (*asset, error) {
	bytes, err := declarationsChown_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/chown_declaration.toml", size: 184, mode: os.FileMode(420), modTime: time.Unix(1503177423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsDefault_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x58\x4f\x8f\xdc\xba\x0d\x3f\xc7\x9f\xc2\x98\x77\x0b\x52\x24\xd9\xdd\x6e\x93\x02\x39\x04\x7d\xaf\xa7\xa2\xef\xf5\xe5\xd0\xc3\x62\x61\x68\x64\xda\x56\x47\xff\x56\x94\x66\xc6\xdf\xbe\x90\x6d\x49\x94\x67\x17\x49\x0e\xfb\xfb\x91\x32\x45\x89\x14\x45\xcd\xd3\x8f\x19\x3d\xa8\xbf\xfc\x83\x49\x89\xcf\x4d\xf3\x4b\xfb\x2b\x0c\x2c\x48\xdf\x22\x70\x6e\x94\x6d\xb9\xd1\x83\x18\x3f\xb4\x7e\x12\xd8\x0a\x6c\xad\x03\xef\xe7\x56\x68\x2e\x03\x8a\x33\xb4\xc7\xe0\x5b\x0c\xc3\x20\xb8\x00\xed\xdb\xc1\xb8\x76\x04\x0d\x8e\xc9\xd6\x06\x67\x0d\x42\x1b\x10\x9a\xe6\xbb\x94\xe6\xd2\x7e\x6b\x9f\x0e\x8c\x73\xb0\xfe\xf0\xa1\x79\xf7\x6e\xc3\x0f\x85\x20\x6e\xb8\xff\x9f\x17\x0a\xae\x1b\x93\xcc\xa9\x1b\x78\x14\xba\xdf\x90\x3b\xad\x80\x33\x3b\x82\xcf\x18\x33\x9e\x7a\xe1\x12\x54\xa6\x4f\xd0\x5c\x34\x81\xf7\x77\x1b\x91\x86\x9f\xba\x11\xbc\x03\xdc\x49\xa2\x53\x54\xa4\x99\x36\x28\x01\x6c\x16\x62\xd2\x1b\xad\x81\xa7\xf9\x8d\x9d\xbb\x41\x48\xe8\x1c\xd3\x63\x1a\xe1\x80\x6d\xfa\x3e\xd8\x0c\xee\x32\xba\x5f\x11\x58\x23\x65\xb7\x8c\x86\x5b\xc9\xe7\x4a\xe4\xe5\x8e\x76\x46\xf6\x54\x64\x2f\x4c\x78\x2a\x78\x8d\x93\x8f\xce\xa0\xfd\x50\x93\xcd\x41\xb8\x02\x3f\x03\xc5\x69\x35\x70\x15\x04\x75\xa3\x33\x69\x79\xc3\x1a\xe3\x34\x70\x60\xfd\x59\x20\x3c\x3e\xec\x68\x57\x24\x52\x1a\x9e\xd7\x3d\x30\x6d\xbc\x18\xe6\x4e\xb1\x14\xf1\x81\x84\x76\x20\xb1\x5d\x71\x9e\x88\x84\x7a\xa8\x62\xbd\xb2\x32\x4e\xa7\x1d\x5c\x60\xf6\xa3\x67\x9e\xe1\xac\xf9\x46\x47\xf0\x57\xe6\x7d\x9a\x57\x0a\xac\xb9\xe1\xc9\x3d\x93\x1d\x75\xa0\xcc\x19\xe8\x30\xac\xad\xa0\xcf\x6e\x44\x98\xe7\x8e\x64\x47\x07\xac\x48\xd1\x15\x17\xbd\x0b\x9a\xec\x5c\xa2\x79\x68\xf0\xe9\x74\x0d\x21\x66\x75\x0e\xca\x08\x9e\xdb\x50\xf0\xa5\xcf\xb8\x07\xed\xb1\x66\xc9\xde\x08\x1e\x46\xd1\x57\x24\xed\x71\xa4\x81\xea\x42\xa5\xa3\x9f\xd5\x5f\x2d\x99\x83\x3b\x4a\xf4\x22\x3a\xee\x32\xb5\x00\x4e\xb3\x74\x40\xa3\x80\x9a\xb6\xa3\xb3\x85\x50\x45\x45\x9c\x30\x4e\xf8\x39\x0b\x1c\xd3\xbd\x51\x85\x02\x52\xa3\x2b\x25\x2e\x39\xc0\x50\xeb\xeb\xc5\x3a\x29\x94\x28\x3b\xdd\x39\x73\x0c\xe8\xbb\x98\x41\x65\x4c\x40\x36\x96\x55\x20\xb1\x87\x86\x9f\xaa\x25\x46\x81\xb1\xc4\xa0\x9f\x1c\xb0\xbe\x63\x0e\x58\x16\x7a\x62\x21\x6e\x99\x19\x7a\x56\x56\x48\xfd\xad\x9d\x25\xd9\x29\xb6\x93\xc7\xfa\xbe\xbb\x30\xcf\xa7\x5a\x2c\x74\x5a\x14\x95\x7c\xae\x45\x4e\x55\x9f\x9a\x8e\x33\xcd\x41\x26\x9a\x8b\x97\x30\x5d\x0f\xe8\x9d\x99\x33\x8f\x59\x73\x2e\xd9\x27\x4c\x8c\x53\x97\x6b\xfd\xc6\xb1\xf0\x88\x53\xd5\x89\x2c\x1c\xf3\xb6\x0b\xbb\x9d\x91\x93\x90\xdb\x8c\x92\xd4\x07\x59\xd5\x07\x59\x6f\x83\x14\xfa\x54\x50\x3a\x32\x31\x7a\xa0\x0b\xa6\x1f\xec\x78\x27\x25\x02\x24\x1b\x37\x35\x81\x2a\xeb\xf2\x20\x4b\x79\x90\xb4\x3c\xa8\xb5\x68\x6e\x04\xd4\xd0\x57\x57\x85\x12\x9a\x1b\x97\xc8\x29\xd7\xca\x05\x26\x83\xea\xa4\x53\xdd\x5c\x60\x96\x97\x42\xb6\xc0\x3b\x82\x59\xda\x3b\xa5\x98\x2d\x28\x0d\xb1\xce\xf8\x7c\xfd\xa9\x97\x18\x2a\x04\x5f\x96\xa3\x5e\xba\x35\x2b\x32\x35\x36\x6d\xa1\x7a\xe9\x62\x96\xf6\x0e\x38\x88\x74\xc5\x24\x21\x42\xba\xf5\xd5\x4b\x17\x74\x09\x88\x72\x50\x3c\xc1\x31\x67\x93\xc2\x31\xe7\x89\xc2\xd1\xf1\x73\xc6\x98\x4d\x95\xc2\xa9\x82\x26\xab\x5e\x49\x59\x6b\xd0\x79\x8e\xdd\xd5\xaf\xe1\xb2\x55\xea\x2d\xd0\x1a\x2e\x08\x32\xef\x41\x59\x5e\x44\x69\x94\x65\x21\xc5\xce\x0a\x4b\xd0\xb6\x8f\xf1\x4a\xde\x10\x81\x2e\x2f\xce\xc6\xc3\x9e\x52\x61\x21\x67\x8a\x93\x95\xb5\xea\xe4\x71\xab\x5f\x8f\x1b\xbb\x38\x51\xee\x85\x95\x9d\x2b\xb2\x59\x89\x16\x0b\x62\x53\x45\x4b\x1c\x12\x4b\x4b\x24\x4e\x39\xe0\x04\x0d\x2e\xd5\xd5\xc8\x94\xc2\x91\xb0\x42\x14\xb3\x6b\xeb\x64\xd9\x98\xfa\xb1\x9b\x73\xe3\xa0\x54\xc5\x15\x97\xe9\x57\x96\x17\x81\x9e\x39\xdf\xe1\x8c\x3c\x87\xd5\xa9\x7c\x2e\xa2\x4a\x8c\x8c\x7b\x61\x34\x95\x58\xd0\xbd\xd0\x63\x25\x72\x86\x2b\x86\x27\x2a\x7b\x09\x10\x40\xe8\xc1\x50\xa1\x03\x1f\x5c\x65\x0d\x03\xda\x9c\xc7\xab\x68\x49\xee\xd2\x8c\x39\xdf\xf9\xf1\xd6\x20\xf2\x09\xfa\x78\x98\xd8\x30\xc4\x0a\x3b\xef\xc5\x79\x47\xb2\xc8\x32\xc7\xd4\x4e\xd6\xa5\x6b\xae\x53\xec\xfa\xb6\x4e\xe8\x9d\x6e\x01\x41\x42\x35\x87\x73\xcb\x67\x42\x7b\x70\x67\x26\xa9\x0a\x5f\x77\x14\x6f\x1d\xc5\x57\x1c\xc5\x37\x26\x9c\x05\xa4\xfe\x74\x7b\xa7\x24\x52\x8e\x1b\x82\xca\x87\x04\x41\xe5\x0a\x80\xa0\x4c\x1e\xae\x96\x4d\x2f\x5c\xf7\x05\xc5\x94\xab\x59\x3a\x22\x91\x97\x6c\x5d\x18\x25\x3e\x85\x0a\xfc\x50\x7a\x85\xc4\xd2\xbd\xb2\xf0\x50\x69\x43\xa5\xa5\x5f\xd6\xdf\xd1\xae\x08\xf7\x5d\x11\xd6\x5d\x11\xd2\x26\x08\xf7\xed\x0d\xc6\x06\x85\xaa\x1d\xd4\x53\xd1\x6e\x07\xf7\xdd\x0e\xd6\xdd\x0e\xee\xbb\x9d\x45\x50\xab\x77\x5a\xd2\x0b\xe1\x6b\xbd\x10\x92\xe6\x07\x77\xbd\x0e\xbe\xd6\xeb\x2c\x42\xd1\xc7\x2e\xc5\xe5\xb7\x24\x92\x16\x07\xab\x16\xa7\xbe\x61\x71\x52\xa9\x68\xe0\x44\xb2\x67\x52\x7d\x11\x97\x44\x9a\x82\xef\x73\xd3\x10\x6b\x86\xf4\xe8\x59\xba\x39\x50\x8c\x9a\xc9\xf4\x72\x4a\xec\x21\x53\x5a\x13\xe2\xba\xb2\xd9\x05\x97\xd2\xb4\x72\xcb\x52\x7d\x42\x2b\x05\x4f\x89\x99\x2f\x1b\xda\x10\xd0\xf7\x41\xfd\x3c\xc0\x59\x95\x32\xbd\x91\x6c\x21\x5f\x80\x11\xdd\xbc\x55\xa3\x30\x1b\x9d\x91\x14\xa4\x19\xa5\xd9\xb2\xdf\xc3\x36\xda\x8f\xa5\xb5\x2a\x2f\xe6\x25\x2d\xab\xe6\x64\x95\xf4\x20\xa1\x92\xec\x5a\x98\x24\xab\x9e\xdf\x49\x88\x37\xc2\x38\xce\x9c\xc1\xb9\xa0\x77\xd2\xfd\xc0\x9b\x6f\xb7\x05\x7a\xe2\x7d\xf5\x8a\xda\x3f\xa2\xc2\xae\xa1\x0f\xe5\x3a\x08\xe5\x3e\xa2\x4d\xca\x8a\xd3\xa6\x87\x32\xfd\x02\x35\x56\x9a\xcd\x9d\x73\x79\x44\x9e\x15\x8d\x7f\xbc\x2d\x1e\x0a\x4c\x39\x1e\x71\x7e\xd2\x2c\x37\x38\x81\xf1\xfe\x6d\xb7\x7f\x07\x0b\x0e\x8d\x66\x52\xf8\xf9\xef\x9f\x96\xff\xbf\xfd\xe7\x6d\xfd\x97\x9f\xe8\x3f\xdf\x7f\xfe\xf4\xe5\x67\x46\x1e\xee\xbe\x3e\x7c\x7d\xfc\xdb\xdd\xd7\xbf\xde\x0c\xdc\x25\xde\x76\x46\x99\x53\xdd\xed\x0f\x03\x51\xfa\x66\xa2\xde\x1a\x39\x3a\x60\x27\x6b\x84\xce\xbf\x0d\xf1\x09\x06\x19\x70\x22\x75\x43\x22\xf5\x86\x39\x3e\x75\xa9\xd3\xca\x52\x65\xfa\xf8\x92\x91\x6b\x45\x58\xdd\xbe\xff\xfa\xa9\xb3\x5c\x74\x4a\x09\xd3\x95\x26\xa9\x96\x93\x38\x2c\x0a\x17\x74\x0c\x71\x27\x34\x7a\x77\x68\x9e\x9b\xe6\xe9\x9f\x42\x02\x2e\x3f\xc8\x3d\x37\xcd\x9f\xc0\xfa\xdf\xb5\x9c\xff\x60\x7e\xc2\xf6\x5b\xfb\xd4\xbc\x3b\x7c\x3c\x0a\xfd\xf1\xfd\xfb\x68\xe5\xf0\xf1\x68\x8c\xcf\xa4\x87\x73\xc6\xe0\x79\xc6\x93\x51\x90\x89\x14\x47\x8a\x1f\x1f\x32\x53\xd0\x0b\x56\x98\x2e\x86\x8d\x2d\x38\xf6\x3b\x99\x38\x3a\x3d\x52\xc7\xd0\x15\x5f\xbc\xb2\x45\x3e\x63\xc6\x01\xdd\x8a\x9f\x9b\xe6\x5f\x66\xfc\x5d\xff\x37\x6e\x4f\xb5\xd6\xf7\xef\x97\x5d\xf9\xa5\xfd\x31\x99\x20\xfb\x76\x10\x52\xb6\x26\xac\x3f\x31\xfa\x09\x5a\x66\xe3\x51\x60\xb1\x51\x6b\xd1\x02\x17\x83\xe0\xad\x65\x7e\x6a\xa2\x31\x76\x94\xc5\xde\x73\xbb\xfe\xfe\xf8\xdb\x15\xf8\xc2\x9b\xe6\x57\xd0\x73\xa2\x69\x6b\x71\x5a\x03\xf1\x6f\xf0\x17\xe3\x4e\xcf\xcd\x9f\xec\xd2\x7e\x6b\x07\x26\x11\xda\xe6\x0f\x16\x2b\x31\xe1\xce\x78\xc3\x8d\x4c\x1e\x7b\xbe\xf4\x11\x87\xd0\xaf\x7f\x05\x57\x76\xb5\xf7\x63\x0b\xea\xf6\xe3\xea\x8f\xb5\xf5\xfc\xbe\xf4\x98\xed\xb7\xf6\x00\xce\x69\x73\x68\xbe\x3b\x3e\x89\xf8\x68\x0a\x0e\x16\xa3\x87\xeb\x97\xc7\xc3\x87\x36\xfe\x59\x12\xbf\x3d\x5c\xef\xef\x0e\xcf\xff\x0f\x00\x00\xff\xff\x76\xcd\xe3\xe3\xb6\x15\x00\x00")

func declarationsDefault_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsDefault_declarationToml,
		"declarations/default_declaration.toml",
	)
}

func declarationsDefault_declarationToml() (*asset, error) {
	bytes, err := declarationsDefault_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/default_declaration.toml", size: 5558, mode: os.FileMode(420), modTime: time.Unix(1503422232, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsDns_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func declarationsDns_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsDns_declarationToml,
		"declarations/dns_declaration.toml",
	)
}

func declarationsDns_declarationToml() (*asset, error) {
	bytes, err := declarationsDns_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/dns_declaration.toml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1503093921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsFd_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xae\x2c\x2e\x49\xcd\xd5\x75\x4e\xcc\xc9\x29\x8e\xe5\x72\xcc\xc9\xc9\x2f\x57\xb0\x55\x88\xe6\x52\x50\x50\x50\x50\x4a\xce\xc9\x2f\x4e\x55\xd2\x81\x70\x72\x73\x13\x0b\x90\xd9\x46\x70\x4e\x69\x1e\x92\x54\x7a\x6a\x49\x4a\x49\x62\x52\x4e\x6a\x71\x66\x15\x5c\x6f\x4a\x69\x01\x12\xd3\x08\x89\x6d\x0c\x63\x17\xa5\x26\xa6\xc0\xd8\xe5\x45\x99\x25\x70\xbd\x69\x39\xf9\xc9\xd9\x70\x4e\x72\x5e\x49\x0e\x0a\xc7\xcc\x04\xc6\xcd\xcc\x4f\x2e\xc9\x51\xe2\x8a\x05\x04\x00\x00\xff\xff\xd5\x64\xdf\x6e\xd4\x00\x00\x00")

func declarationsFd_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsFd_declarationToml,
		"declarations/fd_declaration.toml",
	)
}

func declarationsFd_declarationToml() (*asset, error) {
	bytes, err := declarationsFd_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/fd_declaration.toml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1506442135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsFilesystem_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xc1\x6e\x83\x30\x0c\x86\xef\x3c\x45\xc4\xb9\xbb\xb0\x69\xb7\x1d\xa6\x3d\xc2\x8e\x55\x85\xac\xe0\x74\x88\xc4\x20\x92\x0a\xf1\xf6\x13\x69\x93\xd8\x51\xb7\x9b\xbf\xdf\xff\xef\x04\x93\xf3\xf7\xee\x03\xba\x97\x2f\xb0\xd6\x5f\x9a\x4f\x6b\xe7\x4d\x7d\xa8\x73\xa3\x94\x52\xad\x5e\x11\x42\x7b\xba\xc3\xbc\x20\xa5\x3a\xac\x37\xd2\x10\xf0\xfd\x2d\x29\xe6\x1f\xa9\x4e\xb5\x27\xf5\x70\xf8\x00\xa1\x04\x24\xd9\x03\x79\x2b\xd5\x84\x5b\x0c\x16\x25\xa2\xf1\x72\x92\xf1\xa2\x2d\xc6\xb2\x4b\x4a\x6b\x3d\xe8\x71\x50\x11\x96\x71\x41\x5e\x77\xd9\x09\x5a\xa3\xf7\xe5\xa0\x3b\xe7\xb6\xfe\x71\xf3\xc0\xae\x1c\x39\x51\x05\xf3\x46\xaf\x9d\xc0\x7c\x7b\x41\xa6\xb2\x9a\x27\x5d\xf6\xe5\x95\x7b\x45\x18\xec\x48\x13\xdb\xf2\xee\x0e\x21\x07\x44\xf3\x46\x4f\xcd\x45\x48\xf3\x64\x80\x0f\xcb\x1d\x07\x7e\x2a\x31\x02\x87\x10\xba\x5a\x90\x5c\xfe\x1f\x62\xce\xf6\x56\xa0\x9b\x86\x71\x15\x50\xa6\xb8\x89\xca\x8a\x23\xb0\x13\x1c\xcb\x5d\x31\x0c\x48\x81\x3d\x82\xa4\x94\x3f\xc2\xec\x46\x90\xdf\x49\xf3\x87\xb7\x93\xce\x30\x40\x00\x2e\x1c\x75\x6f\x46\x8b\xfd\x0a\x74\x45\x2e\xff\x61\xc9\x2b\x72\xd1\xd4\x5c\x7e\x03\x00\x00\xff\xff\xfd\xfd\x74\x11\xbf\x03\x00\x00")

func declarationsFilesystem_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsFilesystem_declarationToml,
		"declarations/filesystem_declaration.toml",
	)
}

func declarationsFilesystem_declarationToml() (*asset, error) {
	bytes, err := declarationsFilesystem_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/filesystem_declaration.toml", size: 959, mode: os.FileMode(420), modTime: time.Unix(1506721011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsNaming_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func declarationsNaming_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsNaming_declarationToml,
		"declarations/naming_declaration.toml",
	)
}

func declarationsNaming_declarationToml() (*asset, error) {
	bytes, err := declarationsNaming_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/naming_declaration.toml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1506721011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsReceive_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xae\x2c\x2e\x49\xcd\xd5\x75\x4e\xcc\xc9\x29\x8e\xe5\x72\xcc\xc9\xc9\x2f\x57\xb0\x55\x88\xe6\x52\x50\x50\x50\x50\x2a\x4a\x4d\x2e\xcb\xcd\x2d\x4e\x57\xd2\x41\xf0\x91\xd9\x69\x45\xf9\xb9\xc8\x7c\x90\x52\xae\x58\x40\x00\x00\x00\xff\xff\x77\x25\x2e\x4d\x54\x00\x00\x00")

func declarationsReceive_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsReceive_declarationToml,
		"declarations/receive_declaration.toml",
	)
}

func declarationsReceive_declarationToml() (*asset, error) {
	bytes, err := declarationsReceive_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/receive_declaration.toml", size: 84, mode: os.FileMode(420), modTime: time.Unix(1504304228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsRemovable_storage_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8e\xdb\x3c\x0c\xbc\xfb\x29\x88\xe4\xf0\x7d\x05\xd2\x16\x48\x7f\x6e\x3d\x14\x05\x7a\x2e\xba\x87\x3d\x2c\x82\x80\x91\xe8\xb5\x10\x89\x72\x4d\x7a\x8d\xf4\xe9\x0b\x3b\xb1\x7e\x82\x6d\x6f\x9c\xe1\x70\x34\x96\x25\x3d\x3d\x5c\x44\x29\xbc\xfd\x86\xde\xcb\xa1\x69\xb6\xf0\x48\x60\x23\xff\xa7\xd0\xe1\x0b\x41\x88\x23\x2b\x9c\xc8\xe0\x28\x04\xda\x11\x58\x7a\x71\x86\x40\xba\x38\x7a\x0b\xa7\x9b\x84\xe6\xb2\x8d\x03\x81\x89\xac\xe8\x98\x06\x38\xc5\xa8\x3b\x70\x0a\xe8\x25\xc2\xb4\xe8\x07\xfa\x35\xba\x81\xa0\xd9\x82\xc1\xfe\x28\x17\x39\xa2\x0d\x8e\x61\xea\x9c\xe9\x80\xe3\xbb\xa6\xf9\xea\x7d\x9c\xe0\x0b\x3c\x35\x00\x00\x1b\x33\x10\xea\x66\x07\x5b\xf8\x49\xbd\x47\x43\xd0\x3a\x4f\xb2\xe4\x06\xb9\x88\x99\xa3\xc3\xe4\xb4\x03\xc7\xc6\x8f\x96\x20\xb2\x21\x70\xa1\xf7\x14\x68\xc9\xf6\xbf\x13\x19\x09\xb6\xfb\x4f\x6f\xae\xa6\xb1\x27\xde\xec\xae\xb5\x0e\x23\x1b\x54\xfa\xfc\x71\x65\xda\x7f\x50\xf7\x53\x9b\x1d\xdc\x14\xa2\xa8\x79\xa0\x46\x7e\x86\x65\x6b\xad\x99\xa6\x65\x30\x33\x0b\x6c\xa5\x76\x6a\xa5\x6a\x57\xb6\x45\xc8\x5a\x7a\x6f\x74\x5b\x28\x13\xbd\xeb\xa9\xac\xf7\x49\x89\xc6\x90\x48\x5e\xe8\x8a\x53\xdb\x74\x21\xda\x22\xf2\x82\x57\x74\x07\xe2\xc4\x1f\xf6\x15\x4c\xe9\x2b\xd4\xde\x49\xdb\x57\xba\xc5\x97\xdf\xa9\x07\x42\xeb\x1d\x9f\x8b\x5d\xbe\x84\x99\x48\x03\x55\x73\xe4\x57\xc5\x99\x58\xfd\xea\x81\xd2\x2c\x75\x02\xca\x39\x8f\x31\x06\x42\xdd\xdf\x13\x35\xce\xff\x8f\x28\xcd\x1e\x7d\x05\xc3\xd9\xba\xa1\x02\xd9\x25\x9c\x39\x6f\xf1\x02\x8a\x15\x42\x31\xf7\x4c\x6a\x89\xb5\x38\x04\x2b\x93\xff\x48\x21\x6f\x2b\x24\x17\x36\xe5\xc1\xbb\xb0\x49\xc0\xa2\x62\x49\xcc\xf5\x71\xbe\x98\xc7\x01\xf9\x99\x4a\xfa\x2f\x92\xb4\x45\xe1\x2a\x82\x2d\x10\x5b\x88\x2d\xb4\x92\xee\xf5\x2d\xa3\x8f\x92\x2c\x43\xc0\x3e\xd5\x23\x17\x68\xfe\x34\xc5\x93\x27\x71\xbf\x93\xdc\x8e\x7d\x51\x56\xe7\x65\xad\xa7\xc1\xe5\x7b\xdd\xfa\x68\xce\x79\x3f\x58\xfd\x0a\x5c\x34\xea\x37\x45\x4c\x9b\x63\x1e\x9a\xe6\xe9\x7b\x7a\x96\x0e\xcd\xe3\xe0\x96\x24\x3f\x50\x3b\xc9\x6f\xd9\xfb\xc0\x3a\x3b\x3c\x68\x1c\xf0\xf9\xb5\x57\x54\x23\xcc\xa2\x1d\x68\xe7\x04\x0c\xf2\xdc\x34\xdd\xbc\x61\x16\xda\x38\x00\x82\x19\x45\x63\x00\x1f\x0d\xaa\x8b\xdc\x1c\xfe\x04\x00\x00\xff\xff\xcc\xdb\x4b\x59\xc5\x05\x00\x00")

func declarationsRemovable_storage_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsRemovable_storage_declarationToml,
		"declarations/removable_storage_declaration.toml",
	)
}

func declarationsRemovable_storage_declarationToml() (*asset, error) {
	bytes, err := declarationsRemovable_storage_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/removable_storage_declaration.toml", size: 1477, mode: os.FileMode(420), modTime: time.Unix(1506441427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsSafe_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\xcf\x6e\xdb\x30\x0c\xc6\xcf\xf3\x53\x04\xe9\xad\x98\x6b\x60\x18\x8a\x61\x40\x0f\xc3\xda\x5d\x37\x2c\xc7\x22\x10\x64\x89\x8e\xb5\x48\xa2\x2a\xd2\x6e\xf5\xf6\x83\x2c\xff\x5b\x77\xca\xef\xfb\x2c\x32\x24\x4d\xeb\xf9\x94\x88\xc1\xd5\xdf\xa5\xb5\x74\xae\xaa\x9b\xc3\x09\xe0\xd0\x33\x07\xfa\xda\x34\x1a\x15\xdd\x69\x54\x57\x88\x77\x0a\x5d\x03\xfe\x62\x3c\x34\x04\x6a\x88\x86\x53\x06\x85\x2e\x34\x37\x64\x2e\xde\x74\x46\x49\xcf\x35\x25\x52\x39\x5b\xdd\xda\x1c\xa9\xeb\x36\xd5\xdc\x43\xad\xa1\x93\x83\xe5\x3a\x44\xec\x8c\x85\xea\x29\x46\x8f\x87\x87\xc3\x73\xf5\xe1\x28\x95\xe2\xe3\xc7\x0c\x5a\x8b\x2b\xa4\x99\xff\xb0\x71\xf0\x36\x89\x36\x74\xd3\xaf\xca\x49\xc5\xfc\x68\xe7\x10\xf0\xde\xf1\x33\x45\x90\x0c\xc2\xa1\x1e\x6c\x71\x34\x58\xf8\xd7\xe9\x8c\x37\xbc\x37\x2e\xc0\xe2\x0a\xd1\x83\x15\x94\x1c\xad\x9e\x03\x17\xd0\x1a\x55\xaa\x7b\x1f\x65\x30\x40\x74\x0b\xda\x09\xae\xca\x85\x02\xf0\x06\x4a\xe4\xb6\x85\x45\xa9\x77\xde\x4e\x26\xc5\x25\xcc\x22\x5e\x87\x20\xb4\x42\xbc\x9a\x92\xdd\xb5\xc6\x97\x73\x0e\x07\xcf\x33\x8d\x20\x82\xbc\x40\x29\xd1\x4b\x07\x82\x51\xf4\xd2\x6b\x0b\x42\x96\x43\xbe\x23\x82\x38\x2e\xa9\x31\x80\x17\x6d\x7a\x77\x28\x40\xec\x04\x8c\xe0\x59\xe4\x03\x8b\x47\xe8\xa5\x35\x5c\xfa\x0d\x66\x44\x16\x11\x71\x0e\x89\xa8\x80\x48\x8c\x4e\x44\x90\x7a\x7c\x6f\xbe\x46\xc3\x30\xbb\x1c\xa5\x2a\x6d\xbc\x0c\x10\xd3\x7e\x6a\x2f\x03\xb2\x5c\x8a\x8b\xd0\x2e\xe9\x23\xbc\x0c\x40\xbc\xee\x02\xfd\x37\x7f\x02\xf6\xb4\x50\x7e\xf5\xd8\x69\x39\x3f\xca\x7b\xc7\x3b\xcc\xfb\x58\xe4\xba\x23\xf4\x2a\x03\xfa\x0d\xbb\xb2\x5e\x94\xa8\x2b\x59\x45\xde\xe3\xb9\xb0\x61\x1b\x7a\xc1\x4f\x85\x3d\xf5\x32\x96\x7c\x03\x81\x35\xed\x82\x71\x5a\xf5\x4e\xcf\x9a\xe7\x39\x8f\xee\xcb\xfd\x0a\x68\xf5\xb1\x3a\x57\xd5\xf3\x0f\x63\x81\xa6\xcf\xf0\x5c\xfd\x06\xa9\x7f\x7a\x9b\x7e\x49\xee\x69\xfe\x38\x9a\xd6\xf8\xe6\xf6\x76\x0a\x6c\xf2\x84\x56\xa1\x61\x5c\x19\x58\xad\xdc\xa3\x83\x55\x58\xd3\xee\xf9\xfe\xf3\xaa\x1c\x68\x23\x37\xe5\xb7\xc4\x18\x36\xce\x2f\x75\x15\x71\xff\xf7\xb4\x2f\x8c\xe2\x56\x0b\xbb\xb0\xf9\x89\x56\x1e\x28\x16\x3e\x57\xd5\x23\xf8\xf4\xf4\x06\x6a\xdf\x24\xf5\x65\x22\xa7\x79\x1a\x8f\xe5\xca\x38\x95\x1b\xe5\x9b\x62\x83\xfe\xf0\x70\x38\x42\xbe\x3a\x8e\x7f\x03\x00\x00\xff\xff\x93\x65\x43\xe5\xbc\x04\x00\x00")

func declarationsSafe_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsSafe_declarationToml,
		"declarations/safe_declaration.toml",
	)
}

func declarationsSafe_declarationToml() (*asset, error) {
	bytes, err := declarationsSafe_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/safe_declaration.toml", size: 1212, mode: os.FileMode(420), modTime: time.Unix(1503595674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsSend_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xae\x2c\x2e\x49\xcd\xd5\x75\x4e\xcc\xc9\x29\x8e\xe5\x72\xcc\xc9\xc9\x2f\x57\xb0\x55\x88\xe6\x52\x50\x50\x50\x50\x2a\x4e\xcd\x4b\x29\xc9\x57\xd2\x41\xf0\x90\xd9\x69\x99\x39\xa9\xc8\xfc\xdc\xe2\x74\x14\x2e\x88\xcf\x15\x0b\x08\x00\x00\xff\xff\x99\xc5\xb7\x13\x62\x00\x00\x00")

func declarationsSend_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsSend_declarationToml,
		"declarations/send_declaration.toml",
	)
}

func declarationsSend_declarationToml() (*asset, error) {
	bytes, err := declarationsSend_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/send_declaration.toml", size: 98, mode: os.FileMode(420), modTime: time.Unix(1504304067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _declarationsSocket_declarationToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xae\x2c\x2e\x49\xcd\xd5\x75\x4e\xcc\xc9\x29\x8e\xe5\x72\xcc\xc9\xc9\x2f\x57\xb0\x55\x88\xe6\x52\x50\x50\x50\x50\x2a\xce\x4f\xce\x4e\x2d\x51\xd2\x81\xf0\xd2\x53\x4b\x40\x02\xf9\x05\x70\x91\x62\x0c\x11\xa8\x9a\xbc\xc4\xdc\x54\xb8\x22\xb0\x21\x05\x89\x99\x45\xa8\x22\xa8\xbc\xe4\xc4\x9c\x1c\x98\x48\x52\x66\x5e\x0a\x8c\x9d\x93\x59\x5c\x92\x9a\x07\x57\x9b\x51\x5a\x92\x92\x5f\x9e\xa7\xc4\x15\xcb\x05\x08\x00\x00\xff\xff\x83\xdc\x08\x47\xbb\x00\x00\x00")

func declarationsSocket_declarationTomlBytes() ([]byte, error) {
	return bindataRead(
		_declarationsSocket_declarationToml,
		"declarations/socket_declaration.toml",
	)
}

func declarationsSocket_declarationToml() (*asset, error) {
	bytes, err := declarationsSocket_declarationTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declarations/socket_declaration.toml", size: 187, mode: os.FileMode(420), modTime: time.Unix(1506721232, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"declarations/admin_declaration.toml": declarationsAdmin_declarationToml,
	"declarations/chown_declaration.toml": declarationsChown_declarationToml,
	"declarations/default_declaration.toml": declarationsDefault_declarationToml,
	"declarations/dns_declaration.toml": declarationsDns_declarationToml,
	"declarations/fd_declaration.toml": declarationsFd_declarationToml,
	"declarations/filesystem_declaration.toml": declarationsFilesystem_declarationToml,
	"declarations/naming_declaration.toml": declarationsNaming_declarationToml,
	"declarations/receive_declaration.toml": declarationsReceive_declarationToml,
	"declarations/removable_storage_declaration.toml": declarationsRemovable_storage_declarationToml,
	"declarations/safe_declaration.toml": declarationsSafe_declarationToml,
	"declarations/send_declaration.toml": declarationsSend_declarationToml,
	"declarations/socket_declaration.toml": declarationsSocket_declarationToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"declarations": &bintree{nil, map[string]*bintree{
		"admin_declaration.toml": &bintree{declarationsAdmin_declarationToml, map[string]*bintree{}},
		"chown_declaration.toml": &bintree{declarationsChown_declarationToml, map[string]*bintree{}},
		"default_declaration.toml": &bintree{declarationsDefault_declarationToml, map[string]*bintree{}},
		"dns_declaration.toml": &bintree{declarationsDns_declarationToml, map[string]*bintree{}},
		"fd_declaration.toml": &bintree{declarationsFd_declarationToml, map[string]*bintree{}},
		"filesystem_declaration.toml": &bintree{declarationsFilesystem_declarationToml, map[string]*bintree{}},
		"naming_declaration.toml": &bintree{declarationsNaming_declarationToml, map[string]*bintree{}},
		"receive_declaration.toml": &bintree{declarationsReceive_declarationToml, map[string]*bintree{}},
		"removable_storage_declaration.toml": &bintree{declarationsRemovable_storage_declarationToml, map[string]*bintree{}},
		"safe_declaration.toml": &bintree{declarationsSafe_declarationToml, map[string]*bintree{}},
		"send_declaration.toml": &bintree{declarationsSend_declarationToml, map[string]*bintree{}},
		"socket_declaration.toml": &bintree{declarationsSocket_declarationToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

